# -*- coding: utf-8 -*-
"""Onion Forecasting _time_Series_forecasting_(Auto_Regressive).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zEvLiKVl64Qv2tMYt43U_MwyJfROWYHd
"""

pip install pmdarima

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import pandas as pd
pd.set_option('display.float_format', lambda x: '%.4f' % x)
import seaborn as sns
sns.set_context("paper", font_scale=1.3)
sns.set_style('white')
import warnings
warnings.filterwarnings('ignore')
from time import time
import matplotlib.ticker as tkr
from scipy import stats
from statsmodels.tsa.stattools import adfuller
from sklearn import preprocessing
from statsmodels.tsa.stattools import pacf
# %matplotlib inline
import math
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
from keras.layers import *
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from keras.callbacks import EarlyStopping

!gdown --id 1gWE04_0flPuydo7xBoprNa-ScEi8xqnK --output Onion_dataset.csv

df = pd.read_csv("Onion_dataset.csv", index_col='Date',parse_dates=True)
df.head()

sns.lineplot (x=df.index, y='Red Onion Price' , data=df);

df['month'] = df.index.month
df['day_of_month'] = df.index.day

df_by_month = df.resample('M').sum()
sns.lineplot(x=df_by_month.index, y='Red Onion Price' , data=df_by_month);

df.info()

correlation = df.corr()

plt.figure(figsize = (8,8))
sns.heatmap(correlation,cbar=True, square=True , fmt='.2f',annot =True,annot_kws ={'size': 12},cmap='Blues')

print(correlation['Red Onion Price'])

sns.distplot (df['Red Onion Price'],color ='blue')

temp = df.copy() # make temporary copy of dataframe
dataset = temp['Red Onion Price'].dropna().values # numpy.ndarray of the actual load
dataset = dataset.astype('float32') 
dataset = np.reshape(dataset, (-1, 1)) # reshape to one feature; required for the models

scaler = MinMaxScaler(feature_range=(0, 1)) # Min Max scaler
dataset = scaler.fit_transform(dataset) # fit and transform the dataset

# Train and Test splits
train_size = int(len(dataset) * 0.80) 
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]

def create_dataset(dataset, look_back=1):
    X, Y = [], []
    for i in range(len(dataset)-look_back-1):
        a = dataset[i:(i+look_back), 0]
        X.append(a)
        Y.append(dataset[i + look_back, 0])
    return np.array(X), np.array(Y)
    
look_back = 25 # timesteps to lookback for predictions
X_train, trainY = create_dataset(train, look_back)
X_test, testY = create_dataset(test, look_back)

# reshape input to be [samples, time steps, features]
X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))
X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))
print("Shapes: \nTraining set: {}, Testing set: {}".format(X_train.shape, X_test.shape))
print("Sample from training set: \n{}".format(X_train[0]))

from matplotlib import pyplot
from statsmodels.graphics.tsaplots import plot_acf 
plot_acf(dataset, lags=200)
pyplot.show()

from matplotlib import pyplot
from statsmodels.graphics.tsaplots import plot_pacf
plot_pacf(dataset, lags=70)
pyplot.show()

from statsmodels.tsa.stattools import adfuller
def ad_test(dataset):
     dftest = adfuller(dataset, autolag = 'AIC')
     print("1. ADF : ",dftest[0])
     print("2. P-Value : ", dftest[1])
     print("3. Num Of Lags : ", dftest[2])
     print("4. Num Of Observations Used For ADF Regression:",      dftest[3])
     print("5. Critical Values :")
     for key, val in dftest[4].items():
         print("\t",key, ": ", val)

ad_test(df['Red Onion Price'])

from pmdarima import auto_arima
stepwise_fit = auto_arima(df['Red Onion Price'], trace=True,
suppress_warnings=True)

stepwise_fit.summary()

from statsmodels.tsa.ar_model import AR
from statsmodels.tsa.ar_model import AutoReg
model = AutoReg(dataset, lags=2)
model_fit = model.fit()
result = model.fit()
print(result.summary())
print("μ={} ,ϕ={}".format(result.params[0],result.params[1]))

test_predict = model_fit.predict(start=len(train), end=len(train)+len(test)-1, dynamic=False)
# invert predictions
test_predict = scaler.inverse_transform(test_predict.reshape(-1, 1))
Y_test = scaler.inverse_transform(test)
print('Test Mean Absolute Error:', mean_absolute_error(Y_test, test_predict))
print('Test Root Mean Squared Error:',np.sqrt(mean_squared_error(Y_test, test_predict)))

mape = np.mean(np.abs((Y_test - test_predict) / Y_test)) * 100
print("Testing MAPE: {}".format(mape))

idx = 300
aa=[x for x in range(idx)]
plt.figure(figsize=(8,4))
plt.plot(aa, Y_test[:idx], marker='.', label="Actual" )
plt.plot(aa, test_predict[:idx], 'r', label="Prediction")
# plt.tick_params(left=False, labelleft=True) #remove ticks
plt.tight_layout()
sns.despine(top=True)
plt.subplots_adjust(left=0.07)
plt.title('Red Onion Price Prediction using Auto Regressive Model')
plt.ylabel('Red Onion Price', size=12)
plt.xlabel('Time step (Days)', size=12)
plt.legend(fontsize=12)
plt.show();

